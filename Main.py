# main.py - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
import streamlit as st
import duckdb as db
import pandas as pd
from pymongo import MongoClient

# Page configuration
st.set_page_config(
    page_title="Phone Number Price Prediction",
    page_icon="üì±",
    layout="wide"
)

# Main page content
st.title("üì± Phone Number Price Prediction & Search")
st.write("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞ Machine Learning")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á tabs
tab1, tab2, tab3 = st.tabs(["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "ü§ñ AI Prediction", "üß† ML Model"])

with tab1:
    st.write("# ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏±‡∏á ‡∏°‡∏≤‡πÅ‡∏ß‡πâ‡∏ß‡∏ß‡∏ß! üëã")

    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB (localhost ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MongoDB Compass)
        client = MongoClient("mongodb+srv://TharathipK:TharathipK@tharathipk.xk7qsqc.mongodb.net/")
        duckdb1 = client["phone_db"]
        collection = duckdb1["phone_numbers"]

        # Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame
        cursor = collection.find()  # ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        df_mongo = pd.DataFrame(list(cursor))

        if df_mongo.empty:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB")
            st.stop()

        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "_id" ‚Üí "phone_number"
        df_mongo = df_mongo.rename(columns={"_id": "phone_number"}) 

        # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏î‡πâ‡∏ß‡∏¢ pandas
        csv_df = pd.read_csv("109k_phone_number_price.csv")

        if csv_df.empty:
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV file")
            st.stop()

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
        # st.write("**CSV Columns:**", list(csv_df.columns))
        # st.write("**MongoDB Columns:**", list(df_mongo.columns))

        #  key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ join ‡∏Ñ‡∏∑‡∏≠ 'phone_number'
        merged_df = pd.merge(csv_df, df_mongo, on='phone_number', how='inner')

        if merged_df.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á CSV ‡πÅ‡∏•‡∏∞ MongoDB")
            st.stop()

        # ‡πÉ‡∏ä‡πâ .sql ‡πÅ‡∏ó‡∏ô .query
        df = db.sql("""
            SELECT a.phone_number, a.price, b.description, b.provider, b.seller_id, b.seller_name
            FROM csv_df a
            JOIN df_mongo b
            ON a.phone_number = b.phone_number
        """).to_df()

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÅ‡∏•‡∏∞ register table ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        con = db.connect()
        con.register('df_table', df)  # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ table ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

        st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        # phone number input
        st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå")
        input_digits = []
        cols = st.columns(10)
        for i in range(10):
            digit = cols[i].text_input(f"{i+1}", max_chars=1, key=f"digit_{i}")
            input_digits.append(digit.strip() if digit else ".")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á regex pattern ‡∏à‡∏≤‡∏Å input
        regex_pattern = "".join(input_digits)
        
        # Selectbox 
        col1, col2, col3 = st.columns(3)

        with col1:
            option1 = st.selectbox('‡∏ú‡∏•‡∏£‡∏ß‡∏°', ['All'] + list(range(9, 82)))

        with col2:
            option2 = st.selectbox('‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤', ['All', '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000', 
                                                '1,001 - 3,000', 
                                                '3,001 - 5,000',
                                                '5,001 - 10,000', 
                                                '10,001 - 20,000',
                                                '20,001 - 40,000', 
                                                '40,001 - 100,000',
                                                '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000'
                                                ])

        with col3:
            option3 = st.selectbox('‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', ['All', 
                                                'AIS',
                                                'DTAC',
                                                'TRUE MOVE',
                                                'i-Mobile',
                                                'My by CAT',
                                                'TOT 3G',
                                                'PENGUIN',
                                                'Myworld',
                                                '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'                                        
                                                ])

        # Search button
        if st.button("üîç Search"):
            try:
                # dynamic SQL query
                conditions = []
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                # available_columns = df.columns.tolist()
                # st.write("**Available columns:**", available_columns)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á
                if option1 != 'All':
                    # ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    # ‡πÄ‡∏ä‡πà‡∏ô 'sum_digits' ‡∏´‡∏£‡∏∑‡∏≠ 'phone_sum' ‡πÅ‡∏ó‡∏ô 'Phone Number No Dash'
                    conditions.append(f"price > 0")  # placeholder condition
                    
                if option2 != 'All':
                    if option2 == '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000':
                        conditions.append("price <= 1000")
                    elif option2 == '1,001 - 3,000':
                        conditions.append("price BETWEEN 1001 AND 3000")
                    elif option2 == '3,001 - 5,000':
                        conditions.append("price BETWEEN 3001 AND 5000")
                    elif option2 == '5,001 - 10,000':
                        conditions.append("price BETWEEN 5001 AND 10000")
                    elif option2 == '10,001 - 20,000':
                        conditions.append("price BETWEEN 10001 AND 20000")
                    elif option2 == '20,001 - 40,000':
                        conditions.append("price BETWEEN 20001 AND 40000")
                    elif option2 == '40,001 - 100,000':
                        conditions.append("price BETWEEN 40001 AND 100000")
                    elif option2 == '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000':
                        conditions.append("price > 100000")
                
                if option3 != 'All':
                    conditions.append(f"provider = '{option3}'")

                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå
                if any(d != "." for d in input_digits):
                    phone_like_pattern = "".join([d if d != "." else "_" for d in input_digits])
                    conditions.append(f"phone_number LIKE '{phone_like_pattern}'")

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query
                sql_query = "SELECT * FROM df_table"
                if conditions:
                    where_clause = " AND ".join(conditions)
                    sql_query += f" WHERE {where_clause}"
                
                sql_query += " LIMIT 1000"  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

                # st.write("**SQL Query:**", sql_query)  # debug
                
                results = con.execute(sql_query).df()
                countno = results.shape[0]
                
                st.subheader(f"‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {countno:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå")
                
                if countno > 0:
                    st.dataframe(results, use_container_width=True)
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç")
                    
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {str(e)}")
                st.write("**Error details:**", str(e))

    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
        st.write("**Error details:**", str(e))

with tab2:
    st.subheader("ü§ñ AI-Powered Prediction (Gemini)")
    st.write("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ Google Gemini AI")
    st.write("‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    st.write("‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢")
    st.write("‚Ä¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    if st.button("üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ AI Prediction", key="ai_predict"):
        st.switch_page("pages/AI_Prediction.py")

with tab3:
    st.subheader("üß† Machine Learning Model")
    st.write("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Machine Learning Model")
    st.write("‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
    st.write("üöß **Under developing**")
    if st.button("‚è≥ ML Model (Coming Soon)", key="ml_predict", disabled=True):
        st.switch_page("pages/ML_Prediction.py")

st.markdown("---")
st.caption("Nida")
