# main.py - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
import streamlit as st
import duckdb as db
import pandas as pd
from pymongo import MongoClient

# Page configuration
st.set_page_config(
    page_title="Phone Number Price Prediction",
    page_icon="üì±",
    layout="wide"
)

# Main page content
st.title("üì± Phone Number Price Prediction & Search")
st.write("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞ Machine Learning")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á tabs
tab1, tab2, tab3 = st.tabs(["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "ü§ñ AI Prediction", "üß† ML Model"])

with tab1:
    st.write("# ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏±‡∏á ‡∏°‡∏≤‡πÅ‡∏ß‡πâ‡∏ß‡∏ß‡∏ß! üëã")

    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB (localhost ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MongoDB Compass)
    client = MongoClient("mongodb+srv://TharathipK:TharathipK@tharathipk.xk7qsqc.mongodb.net/")
    duckdb1 = client["phone_db"]
    collection = duckdb1["phone_numbers"]

    # Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame
    cursor = collection.find()  # ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    df_mongo = pd.DataFrame(list(cursor))

    # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå _id ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á
    # df_mongo.drop(columns=["_id"], inplace=True)

    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "_id" ‚Üí "phone_number"
    df_mongo = df_mongo.rename(columns={"_id": "phone_number"}) 

    # 1. ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏î‡πâ‡∏ß‡∏¢ pandas
    # csv_df = pd.read_csv("C:/Users/USER/OneDrive/Desktop/NIDA/DADS5001 - Data analytics and Data Science tools programming/Week12_streamlit2/109k_phone_number_price.csv")
    csv_df = pd.read_csv("109k_phone_number_price.csv")

    #  key ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ join ‡∏Ñ‡∏∑‡∏≠ 'phone_number'
    merged_df = pd.merge(csv_df, df_mongo, on='phone_number', how='inner')


    # ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ DataFrame ‡∏ä‡∏∑‡πà‡∏≠ csv_df ‡πÅ‡∏•‡∏∞ mongo_df

    # ‡πÉ‡∏ä‡πâ .sql ‡πÅ‡∏ó‡∏ô .query
    df = db.sql("""
        SELECT a.phone_number, a.price , b.description, b.provider, b.seller_id, b.seller_name
        FROM csv_df a
        JOIN df_mongo b
        ON a.phone_number = b.phone_number

    """).to_df()

    #df = pd.read_csv("n_109k_phone_numbers_xls.csv")
    con = db.connect()
    con.register('SELECT * FROM df', df)

    # phone number input
    st.subheader("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå")
    input_digits = []
    cols = st.columns(10)
    for i in range(10):
        digit = cols[i].text_input(f"{i+1}", max_chars=1)
        input_digits.append(digit.strip() if digit else ".")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á regex pattern ‡∏à‡∏≤‡∏Å input
    regex_pattern = "".join(input_digits)
    # Selectbox 
    col1, col2, col3 = st.columns(3)

    with col1:
        option1 = st.selectbox('‡∏ú‡∏•‡∏£‡∏ß‡∏°', ['All'] + list(range(9, 82)))

    with col2:
        option2 = st.selectbox('‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤', ['All', '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000', 
                                            '1,001 - 3,000', 
                                            '3,001 - 5,000',
                                            '5,001 - 10,000', 
                                            '10,001 - 20,000',
                                            '20,001 - 40,000', 
                                            '40,001 - 100,000',
                                            '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000'
                                            ])

    with col3:
        option3 = st.selectbox('‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', ['All', 
                                            'AIS',
                                            'DTAC',
                                            'TRUE MOVE',
                                            'i-Mobile',
                                            'My by CAT',
                                            'TOT 3G',
                                            'PENGUIN',
                                            'Myworld',
                                            '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'                                        
                                            ])


    # Search button
    if st.button("üîç Search"):
        # dynamic SQL query
        conditions = []
        if option1 != 'All':
            conditions.append(f"Phone Number No Dash = '{option1}'")
        if option2 != 'All':
            conditions.append(f"Class Range Price = '{option2}'")
        if option3 != 'All':
            conditions.append(f"provider = '{option3}'")

        where_clause = " AND ".join(conditions)
        sql_query = f"SELECT * FROM df"
        if where_clause:
            sql_query += f" WHERE {where_clause}"

        results = con.execute(sql_query).df()
        countno = results.shape[0]
        
        st.subheader(f"‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {countno} ‡πÄ‡∏ö‡∏≠‡∏£‡πå")
        st.write(results)

with tab2:
    st.subheader("ü§ñ AI-Powered Prediction (Gemini)")
    st.write("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ Google Gemini AI")
    st.write("‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    st.write("‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢")
    st.write("‚Ä¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    if st.button("üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ AI Prediction", key="ai_predict"):
        st.switch_page("pages/AI_Prediction.py")

with tab3:
    st.subheader("üß† Machine Learning Model")
    st.write("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Machine Learning Model")
    st.write("‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
    st.write("üöß **Under developing**")
    if st.button("‚è≥ ML Model (Coming Soon)", key="ml_predict", disabled=True):
        st.switch_page("pages/ML_Prediction.py")

st.markdown("---")
st.caption("Nida")
