# main.py - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Optimized Version - Fixed Serialization)
import streamlit as st
import duckdb as db
import pandas as pd
from pymongo import MongoClient
import time

# Page configuration
st.set_page_config(
    page_title="Phone Number Price Prediction",
    page_icon="üì±",
    layout="wide"
)

# === PERFORMANCE OPTIMIZATIONS ===

# 1. Cache ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataFrame (‡πÑ‡∏°‡πà cache connection)
@st.cache_data(ttl=3600, show_spinner="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡πÅ‡∏•‡∏∞ CSV...")
def load_phone_data():
    """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡πÅ‡∏•‡∏∞ CSV - Return ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ DataFrame"""
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
        client = MongoClient(
            "mongodb+srv://TharathipK:TharathipK@tharathipk.xk7qsqc.mongodb.net/",
            serverSelectionTimeoutMS=5000
        )
        duckdb1 = client["phone_db"]
        collection = duckdb1["phone_numbers"]

        # Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB
        cursor = collection.find({}, {
            "_id": 1, 
            "description": 1, 
            "provider": 1, 
            "seller_id": 1, 
            "seller_name": 1
        })
        df_mongo = pd.DataFrame(list(cursor))
        
        if df_mongo.empty:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB"

        df_mongo = df_mongo.rename(columns={"_id": "phone_number"})

        # ‡∏≠‡πà‡∏≤‡∏ô CSV
        csv_df = pd.read_csv("109k_phone_number_price.csv")
        
        if csv_df.empty:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV"

        # Join ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        merged_df = pd.merge(csv_df, df_mongo, on='phone_number', how='inner')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        def calculate_digit_sum(phone_number):
            """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"""
            return sum(int(digit) for digit in str(phone_number) if digit.isdigit())
        
        merged_df['digit_sum'] = merged_df['phone_number'].apply(calculate_digit_sum)
        
        # ‡∏õ‡∏¥‡∏î MongoDB connection
        client.close()
        
        return merged_df, None
        
    except Exception as e:
        return None, f"Error loading data: {str(e)}"

# 2. Cache connection ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
@st.cache_resource(ttl=3600)
def get_duckdb_connection():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á DuckDB connection ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å"""
    return db.connect()

# 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà cache connection
def search_phone_numbers(df, search_pattern, price_range, provider, digit_pattern):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ DataFrame ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß"""
    try:
        if df is None or df.empty:
            return None, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÑ‡∏°‡πà cache)
        con = get_duckdb_connection()
        con.register('phone_data', df)
        
        conditions = []
        
        # Filter ‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        if search_pattern != 'All':
            conditions.append(f"digit_sum = {search_pattern}")
        
        # Filter ‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
        if price_range != 'All':
            if price_range == '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000':
                conditions.append("price <= 1000")
            elif price_range == '1,001 - 3,000':
                conditions.append("price BETWEEN 1001 AND 3000")
            elif price_range == '3,001 - 5,000':
                conditions.append("price BETWEEN 3001 AND 5000")
            elif price_range == '5,001 - 10,000':
                conditions.append("price BETWEEN 5001 AND 10000")
            elif price_range == '10,001 - 20,000':
                conditions.append("price BETWEEN 10001 AND 20000")
            elif price_range == '20,001 - 40,000':
                conditions.append("price BETWEEN 20001 AND 40000")
            elif price_range == '40,001 - 100,000':
                conditions.append("price BETWEEN 40001 AND 100000")
            elif price_range == '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000':
                conditions.append("price > 100000")
        
        # Filter ‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        if provider != 'All':
            conditions.append(f"provider = '{provider}'")
        
        # Filter ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå
        if digit_pattern and digit_pattern.strip():
            # ‡πÅ‡∏õ‡∏•‡∏á pattern ‡πÄ‡∏õ‡πá‡∏ô SQL LIKE - ‡πÅ‡∏õ‡∏•‡∏á _ ‡πÄ‡∏õ‡πá‡∏ô % ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wildcard ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
            phone_like = digit_pattern.strip()
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà _ ‡∏î‡πâ‡∏ß‡∏¢ % ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQL LIKE wildcard
            phone_like = phone_like.replace('_', '%')
            # ‡∏ñ‡πâ‡∏≤‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ % ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
            if not phone_like.endswith('%'):
                phone_like += '%'
            conditions.append(f"phone_number LIKE '{phone_like}'")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query
        sql_query = "SELECT * FROM phone_data"
        if conditions:
            sql_query += " WHERE " + " AND ".join(conditions)
        # ql_query += " ORDER BY price DESC LIMIT 500"
        sql_query += " ORDER BY price DESC"
        
        results = con.execute(sql_query).df()
        return results, None
        
    except Exception as e:
        return None, f"Search error: {str(e)}"

# === MAIN APP ===

st.title("üì± Phone Number Price Prediction")
st.write("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞ Machine Learning")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á tabs
tab1, tab2, tab3 = st.tabs(["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "ü§ñ AI Prediction", "üß† ML Model"])

with tab1:
    st.write("# ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏±‡∏á ‡∏°‡∏≤‡πÅ‡∏ß‡πâ‡∏ß‡∏ß‡∏ß! üëã")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    df, error_msg = load_phone_data()
    
    if error_msg:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {error_msg}")
        st.stop()
    
    if df is not None and not df.empty:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        col_stat1, col_stat2 = st.columns(2)
        with col_stat1:
            st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(df):,}")
        with col_stat2:
            st.metric("‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£", f"{df['provider'].nunique()} ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")

        st.success(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤!")

    # === SEARCH INTERFACE ===
    st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå")
    
    # Phone number input
    st.write("**‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:**")
    phone_input = st.text_input(
        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå (‡πÉ‡∏ä‡πâ _ ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)", 
        max_chars=10,
        placeholder="‡πÄ‡∏ä‡πà‡∏ô 091_______ ‡∏´‡∏£‡∏∑‡∏≠ 081234567_",
        help="‡∏Å‡∏£‡∏≠‡∏Å 10 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 0812345678 ‡∏´‡∏£‡∏∑‡∏≠ 091_______ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå AIS ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô 091"
    )

    # Filter options
    col1, col2, col3 = st.columns(3)
    
    with col1:
        option1 = st.selectbox('‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç', ['All'] + list(range(9, 82)))
    
    with col2:
        option2 = st.selectbox('‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤', [
            'All', '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000', '1,001 - 3,000', '3,001 - 5,000',
            '5,001 - 10,000', '10,001 - 20,000', '20,001 - 40,000', 
            '40,001 - 100,000', '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000'
        ])
    
    with col3:
        option3 = st.selectbox('‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', [
            'All', 'AIS', 'DTAC', 'TRUE MOVE', 'i-Mobile', 
            'My by CAT', 'TOT 3G', 'PENGUIN', 'Myworld', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
        ])

    # Search controls
    col_btn1, col_btn2 = st.columns([1, 3])
    with col_btn1:
        search_clicked = st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", type="primary")
    with col_btn2:
        auto_search = st.checkbox("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á", value=False)
    
    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    should_search = search_clicked or (auto_search and (phone_input or option2 != 'All' or option3 != 'All'))
    
    if should_search and df is not None:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."):
            start_time = time.time()
            
            # ‡πÅ‡∏õ‡∏•‡∏á phone_input ‡πÄ‡∏õ‡πá‡∏ô pattern
            digit_pattern = phone_input.strip() if phone_input else ""
            
            results, search_error = search_phone_numbers(
                df, option1, option2, option3, digit_pattern
            )
            
            search_time = time.time() - start_time
        
        if search_error:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {search_error}")
        elif results is not None and len(results) > 0:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            st.success(f"üéØ ‡∏û‡∏ö {len(results):,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {search_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
            col_r1, col_r2 = st.columns(2)
            with col_r1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{results['price'].max():,.0f} ‡∏ø") 
            with col_r2:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{results['price'].min():,.0f} ‡∏ø")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            st.dataframe(
                results,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "phone_number": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
                    "price": st.column_config.NumberColumn("‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ø)", format="%d"),
                    "provider": "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢", 
                    "description": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
                    "seller_name": "‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢"
                }
            )
            
            # Export button
            if len(results) > 0:
                csv = results.to_csv(index=False)
                st.download_button(
                    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (CSV)",
                    data=csv,
                    file_name=f"phone_search_results_{int(time.time())}.csv",
                    mime="text/csv"
                )
            
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    with st.expander("üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"):
        st.write("""
        **‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå:**
        - `091_______` = ‡πÄ‡∏ö‡∏≠‡∏£‡πå AIS ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 091
        - `081234567_` = ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 081234567 ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ
        - `0812345678` = ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
        - `08________` = ‡πÄ‡∏ö‡∏≠‡∏£‡πå AIS ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå
        
        **‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:**
        - ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        - ‡πÄ‡∏ä‡πà‡∏ô 0812345678 = 0+8+1+2+3+4+5+6+7+8 = 44
        
        **‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
        - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à
        - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        - ‡πÄ‡∏õ‡∏¥‡∏î "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å
        """)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        if df is not None and not df.empty:
            st.write("**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**")
            sample_sums = sorted(df['digit_sum'].unique())[:10]
            st.write(f"‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö: {', '.join(map(str, sample_sums))}...")

with tab2:
    st.subheader("ü§ñ AI-Powered Prediction (Gemini)")
    st.write("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ Google Gemini AI")
    st.write("‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    st.write("‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢")
    st.write("‚Ä¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    if st.button("üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ AI Prediction", key="ai_predict"):
        st.switch_page("pages/AI_Prediction.py")

with tab3:
    st.subheader("üß† Machine Learning Model")
    st.write("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Machine Learning Model")
    st.write("‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
    st.write("üöß **Under developing**")
    if st.button("‚è≥ ML Model (Coming Soon)", key="ml_predict", disabled=True):
        st.switch_page("pages/ML_Prediction.py")

# Sidebar controls
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        st.cache_data.clear()
        st.cache_resource.clear()
        st.rerun()
    
    st.caption("üí° ‡∏Å‡∏î‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")

st.markdown("---")
st.caption("Nida | ‚ö° Optimized for Speed | üîÑ Auto-cache system")
