# main.py - ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (Updated Search Tab)
import streamlit as st
import duckdb as db
import pandas as pd
from pymongo import MongoClient
import time
import re
import plotly.express as px
import math

# Page configuration
st.set_page_config(
    page_title="Phone Number Price Prediction",
    page_icon="üì±",
    layout="wide"
)

# === PERFORMANCE OPTIMIZATIONS ===

# 1. Cache ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataFrame (‡πÑ‡∏°‡πà cache connection)
@st.cache_data(ttl=3600, show_spinner="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡πÅ‡∏•‡∏∞ CSV...")
def load_phone_data():
    """‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡πÅ‡∏•‡∏∞ CSV - Return ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ DataFrame"""
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
        client = MongoClient(
            "mongodb+srv://TharathipK:TharathipK@tharathipk.xk7qsqc.mongodb.net/",
            serverSelectionTimeoutMS=5000
        )
        duckdb1 = client["phone_db"]
        collection = duckdb1["phone_numbers"]

        # Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB
        cursor = collection.find({}, {
            "_id": 1, 
            "description": 1, 
            "provider": 1, 
            "seller_id": 1, 
            "seller_name": 1
        })
        df_mongo = pd.DataFrame(list(cursor))
        
        if df_mongo.empty:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MongoDB"

        df_mongo = df_mongo.rename(columns={"_id": "phone_number"})

        # ‡∏≠‡πà‡∏≤‡∏ô CSV
        csv_df = pd.read_csv("109k_phone_number_price.csv")
        
        if csv_df.empty:
            return None, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô CSV"

        # Join ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        merged_df = pd.merge(csv_df, df_mongo, on='phone_number', how='inner')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        def calculate_digit_sum(phone_number):
            """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"""
            return sum(int(digit) for digit in str(phone_number) if digit.isdigit())
        
        merged_df['digit_sum'] = merged_df['phone_number'].apply(calculate_digit_sum)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        def categorize_price(price):
            """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤"""
            if price <= 1000:
                return '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000'
            elif price <= 3000:
                return '1,001 - 3,000'
            elif price <= 5000:
                return '3,001 - 5,000'
            elif price <= 10000:
                return '5,001 - 10,000'
            elif price <= 20000:
                return '10,001 - 20,000'
            elif price <= 40000:
                return '20,001 - 40,000'
            elif price <= 100000:
                return '40,001 - 100,000'
            else:
                return '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000'
        
        merged_df['price_range'] = merged_df['price'].apply(categorize_price)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå sum_numbers ‡∏à‡∏≤‡∏Å description
        def extract_numbers_after_sum(text):
            """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡∏ú‡∏•‡∏£‡∏ß‡∏°"""
            if pd.isna(text) or text is None:
                return None
            
            text = str(text)
            pattern = r'‡∏ú‡∏•‡∏£‡∏ß‡∏°\s*(\d{1,2})'
            match = re.search(pattern, text)
            
            if match:
                return int(match.group(1))
            else:
                return None
        
        merged_df['sum_numbers'] = merged_df['description'].apply(extract_numbers_after_sum)
        
        # ‡∏õ‡∏¥‡∏î MongoDB connection
        client.close()
        
        return merged_df, None
        
    except Exception as e:
        return None, f"Error loading data: {str(e)}"

# 2. Cache connection ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
@st.cache_resource(ttl=3600)
def get_duckdb_connection():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á DuckDB connection ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å"""
    return db.connect()

# 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏≤‡∏Å 7_Number.py)
def search_phone_advanced(df, input_digits, sum_filter, price_range_filter, provider_filter, sort_by="price", sort_order="DESC", limit=math.inf):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
    try:
        if df is None or df.empty:
            return None, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        con = get_duckdb_connection()
        con.register('phone_data', df)
        
        conditions = []
        
        # 1. Phone number pattern
        phone_pattern = "".join([d for d in input_digits if d])
        if phone_pattern:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIKE query
            like_pattern = ""
            for i, digit in enumerate(input_digits):
                if digit:
                    like_pattern += digit
                else:
                    like_pattern += "%"  # wildcard
            
            conditions.append(f"phone_number LIKE '{like_pattern}'")
        
        # 2. Sum numbers filter
        if sum_filter != 'All':
            conditions.append(f"sum_numbers = {sum_filter}")
        
        # 3. Price range filter
        if price_range_filter != 'All':
            conditions.append(f"price_range = '{price_range_filter}'")
        
        # 4. Provider filter
        if provider_filter != 'All':
            conditions.append(f"provider = '{provider_filter}'")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL Query
        base_query = "SELECT * FROM phone_data"
        
        if conditions:
            where_clause = " AND ".join(conditions)
            sql_query = f"{base_query} WHERE {where_clause}"
        else:
            sql_query = base_query
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° ORDER BY ‡πÅ‡∏•‡∏∞ LIMIT (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà infinity)
        sql_query += f" ORDER BY {sort_by} {sort_order}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° LIMIT ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà infinity
        if not math.isinf(limit):
            sql_query += f" LIMIT {int(limit)}"
        
        results = con.execute(sql_query).df()
        return results, None
        
    except Exception as e:
        return None, f"Search error: {str(e)}"

# === MAIN APP ===

st.title("üì± Phone Number Price Prediction")
st.write("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ AI ‡πÅ‡∏•‡∏∞ Machine Learning")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á tabs
tab1, tab2, tab3 = st.tabs(["üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå", "ü§ñ AI Prediction", "üß† ML Model"])

with tab1:
    # st.write("# ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏±‡∏á ‡∏°‡∏≤‡πÅ‡∏ß‡πâ‡∏ß‡∏ß‡∏ß! üëã")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    df, error_msg = load_phone_data()
    
    if error_msg:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {error_msg}")
        st.stop()
    
    if df is not None and not df.empty:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        # col_stat1, col_stat2, col_stat3 = st.columns(3)
        # with col_stat1:
        #     st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(df):,}")
        # with col_stat2:
        #     st.metric("‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢", f"{df['provider'].nunique()} ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        # with col_stat3:
        #     max_sum = df['sum_numbers'].max() if not df['sum_numbers'].isna().all() else 0
        #     st.metric("‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{max_sum}")

        st.success("‚úÖ Data loaded - Ready to search!")
        
        # === ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ===
        # ‡πÉ‡∏ä‡πâ session state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏≤‡∏ü
        if 'chart_data' not in st.session_state:
            st.session_state.chart_data = df
            st.session_state.chart_title = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"
        
        st.subheader("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        
        provider_stats = st.session_state.chart_data.groupby('provider').agg({
            'phone_number': 'count'
        }).reset_index()
        
        provider_stats.columns = ['provider', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
        provider_stats = provider_stats.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', ascending=False)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart ‡∏î‡πâ‡∏ß‡∏¢ Plotly
        fig = px.bar(
            provider_stats, 
            x='provider', 
            y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
            title=st.session_state.chart_title,
            color='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
            color_continuous_scale='viridis',
            text='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'
        )
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig.update_layout(
            height=400,
            showlegend=False,
            title_font_size=16,
            title_x=0.5,  # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á
            xaxis_title="‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
            yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå",
            plot_bgcolor='rgba(0,0,0,0)',  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏™
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(size=12)
        )
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á bar
        fig.update_traces(
            texttemplate='%{text:,.0f}',
            textposition='outside',
            textfont_size=12
        )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        chart_container = st.empty()
        chart_container.plotly_chart(fig, use_container_width=True)

    st.divider()

    # === SEARCH INTERFACE ===
    st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå")
    
    # Phone number input ‡πÅ‡∏ö‡∏ö 10 ‡∏Å‡∏•‡πà‡∏≠‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏° 7_Number.py)
    st.write("**‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:**")
    input_digits = []
    cols = st.columns(10)
    for i in range(10):
        with cols[i]:
            digit = st.text_input(
                f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà {i+1}", 
                max_chars=1, 
                key=f"digit_{i}",
                label_visibility="collapsed",
                placeholder=f"{i+1}"
            )
            input_digits.append(digit.strip() if digit else "")

    st.divider()

    # Filter options (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏° 7_Number.py)
    st.write("**‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sum_numbers
        if df is not None:
            unique_sums = sorted([x for x in df['sum_numbers'].dropna().unique() if x is not None])
            option1 = st.selectbox(
                'üìä ‡∏ú‡∏•‡∏£‡∏ß‡∏°', 
                ['All'] + unique_sums,
                help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
            )
        else:
            option1 = st.selectbox('üìä ‡∏ú‡∏•‡∏£‡∏ß‡∏°', ['All'])
    
    with col2:
        option2 = st.selectbox(
            'üí∞ ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤', 
            ['All', '‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1,000', '1,001 - 3,000', '3,001 - 5,000',
             '5,001 - 10,000', '10,001 - 20,000', '20,001 - 40,000', 
             '40,001 - 100,000', '‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100,000'],
            help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
        )
    
    with col3:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á unique values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö provider
        if df is not None:
            unique_providers = ['All'] + sorted(df['provider'].dropna().unique().tolist())
            option3 = st.selectbox(
                'üì° ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', 
                unique_providers,
                help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"
            )
        else:
            option3 = st.selectbox('üì° ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', ['All'])

    # Advanced search options
    with st.expander("üîß ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"):
        col_adv1, col_adv2 = st.columns(2)
        
        with col_adv1:
            sort_by = st.selectbox(
                "‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°",
                ["price", "sum_numbers", "phone_number"],
                format_func=lambda x: {"price": "‡∏£‡∏≤‡∏Ñ‡∏≤", "sum_numbers": "‡∏ú‡∏•‡∏£‡∏ß‡∏°", "phone_number": "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç"}[x]
            )
        
        with col_adv2:
            sort_order = st.selectbox("‡∏•‡∏≥‡∏î‡∏±‡∏ö", ["DESC", "ASC"], format_func=lambda x: {"ASC": "‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å", "DESC": "‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢"}[x])
        
        col_adv3, col_adv4 = st.columns(2)
        
        with col_adv3:
            limit_option = st.selectbox(
                "‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå",
                ["No Limit", "Custom"],
                help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
            )
        
        with col_adv4:
            if limit_option == "Custom":
                limit_results = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=1, max_value=10000, value=1000, step=10)
            else:
                limit_results = float('inf')
                st.markdown("**‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î**")

    st.divider()

    # Search button
    search_col1, search_col2, search_col3 = st.columns([1, 2, 1])
    with search_col2:
        search_button = st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", use_container_width=True, type="primary")
    
    # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if search_button and df is not None:
        with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...'):
            start_time = time.time()
            
            results, search_error = search_phone_advanced(
                df, input_digits, option1, option2, option3, 
                sort_by, sort_order, limit_results
            )
            
            search_time = time.time() - start_time
        
        if search_error:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {search_error}")
        elif results is not None and len(results) > 0:
            countno = len(results)
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            st.success(f"‚úÖ ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {countno:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {search_time:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏î‡πâ‡∏ß‡∏¢‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà
            st.session_state.chart_data = results
            st.session_state.chart_title = f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ (‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {countno:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå)"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏´‡∏°‡πà
            provider_stats_search = results.groupby('provider').agg({
                'phone_number': 'count'
            }).reset_index()
            
            provider_stats_search.columns = ['provider', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
            provider_stats_search = provider_stats_search.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', ascending=False)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart ‡πÉ‡∏´‡∏°‡πà
            fig_search = px.bar(
                provider_stats_search, 
                x='provider', 
                y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                title=st.session_state.chart_title,
                color='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                color_continuous_scale='plasma',  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
                text='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'
            )
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏£‡∏≤‡∏ü
            fig_search.update_layout(
                height=400,
                showlegend=False,
                title_font_size=16,
                title_x=0.5,
                xaxis_title="‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢",
                yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå",
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font=dict(size=12)
            )
            
            fig_search.update_traces(
                texttemplate='%{text:,.0f}',
                textposition='outside',
                textfont_size=12
            )
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
            chart_container.plotly_chart(fig_search, use_container_width=True)
            
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            col_stat1, col_stat2, col_stat3 = st.columns(3)
            
            # with col_stat1:
            #     st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{results['price'].mean():,.0f} ‡∏ö‡∏≤‡∏ó")
            
            with col_stat1:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{results['price'].max():,.0f} ‡∏ö‡∏≤‡∏ó")
            
            with col_stat2:
                st.metric("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", f"{results['price'].min():,.0f} ‡∏ö‡∏≤‡∏ó")
            
            with col_stat3:
                avg_sum = results['sum_numbers'].dropna().mean()
                # st.metric("‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_sum:.1f}" if not pd.isna(avg_sum) else "N/A")
            
            st.divider()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            st.subheader("üìã ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            
            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            display_df = results.copy()
            
            st.dataframe(
                display_df,
                use_container_width=True,
                hide_index=True,
                column_config={
                    "phone_number": st.column_config.TextColumn("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", width="medium"),
                    "price": st.column_config.NumberColumn("‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ø)", format="%d"),
                    "description": st.column_config.TextColumn("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", width="large"),
                    "provider": st.column_config.TextColumn("‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢", width="small"),
                    "price_range": st.column_config.TextColumn("‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤", width="medium"),
                    "sum_numbers": st.column_config.NumberColumn("‡∏ú‡∏•‡∏£‡∏ß‡∏°", width="small"),
                    "seller_name": st.column_config.TextColumn("‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢", width="medium")
                }
            )
            
            # Export button
            csv = results.to_csv(index=False).encode('utf-8-sig')
            st.download_button(
                label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (CSV)",
                data=csv,
                file_name=f'phone_search_results_{countno}_records.csv',
                mime='text/csv'
            )
            
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            st.info("üí° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà")
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.session_state.chart_data = df
            st.session_state.chart_title = "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)"
            st.rerun()

with tab2:
    st.subheader("ü§ñ AI-Powered Prediction (Gemini)")
    st.write("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏î‡πâ‡∏ß‡∏¢ Google Gemini AI")
    st.write("‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    st.write("‚Ä¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢")
    st.write("‚Ä¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
    if st.button("üöÄ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ AI Prediction", key="ai_predict"):
        st.switch_page("pages/AI_Prediction.py")

with tab3:
    st.subheader("üß† Machine Learning Model")
    st.write("‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Machine Learning Model")
    st.write("‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î")
    st.write("üöß **Under developing**")
    if st.button("‚è≥ ML Model (Coming Soon)", key="ml_predict", disabled=True):
        st.switch_page("pages/ML_Prediction.py")

# === SIDEBAR - ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ===
with st.sidebar:
    st.markdown("## üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
    
    if df is not None and not df.empty:
        # === ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° ===
        with st.container():
            total_phones = len(df)
            total_providers = df['provider'].nunique()
            avg_price = df['price'].mean()
            
            # ‡πÅ‡∏™‡∏î‡∏á metrics ‡∏´‡∏•‡∏±‡∏Å
            col_m1, col_m2 = st.columns(2)
            with col_m1:
                st.metric("üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{total_phones:,}")
            with col_m2:
                st.metric("üì° ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢", f"{total_providers}")
            
            # st.metric("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{avg_price:,.0f} ‡∏ø")
        
        st.markdown("---")
        
        # === ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ===
        st.markdown("### üì° ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        
        provider_stats = df.groupby('provider').agg({
            'phone_number': 'count'
        }).reset_index()
        
        provider_stats.columns = ['provider', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô']
        provider_stats = provider_stats.sort_values('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', ascending=False)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö text
        for _, row in provider_stats.iterrows():
            provider = row['provider']
            count = int(row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô'])
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢ ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            st.markdown(f"**{provider}** `{count:,}` ‡πÄ‡∏ö‡∏≠‡∏£‡πå")
        
        st.markdown("---")
        
        # === ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ===
        st.markdown("### üíé ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤")
        
        price_ranges = df['price_range'].value_counts().sort_index()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô bar chart ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
        for price_range, count in price_ranges.items():
            percentage = count / len(df) * 100
            st.markdown(f"**{price_range}**")
            st.progress(percentage/100, text=f"{count:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå ({percentage:.1f}%)")
        
        st.markdown("---")
        
        # === ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ===
        if not df['sum_numbers'].isna().all():
            st.markdown("### üî¢ ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            
            sum_min = int(df['sum_numbers'].min())
            sum_max = int(df['sum_numbers'].max())
            sum_avg = df['sum_numbers'].mean()
            sum_mode = df['sum_numbers'].mode().iloc[0] if not df['sum_numbers'].mode().empty else sum_avg
            
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô metrics
            col_s1, col_s2 = st.columns(2)
            with col_s1:
                st.metric("‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", sum_min)
                st.metric("‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{sum_avg:.1f}")
            with col_s2:
                st.metric("‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", sum_max)
                st.metric("‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢", int(sum_mode))
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°
            popular_sums = df['sum_numbers'].value_counts().head(5)
            st.markdown("**üî• ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°:**")
            for sum_val, count in popular_sums.items():
                st.write(f"‚Ä¢ ‡∏ú‡∏•‡∏£‡∏ß‡∏° {int(sum_val)}: {count:,} ‡πÄ‡∏ö‡∏≠‡∏£‡πå")
        
        st.markdown("---")
    
    # === ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===
    st.markdown("### ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£")
    
    col_btn1, col_btn2 = st.columns(2)
    with col_btn1:
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä", use_container_width=True):
            st.cache_data.clear()
            st.cache_resource.clear()
            st.rerun()
    
    with col_btn2:
        if df is not None and st.button("üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", use_container_width=True):
            sample_data = df.sample(n=3) if len(df) >= 3 else df
            with st.expander("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", expanded=True):
                for idx, row in sample_data.iterrows():
                    st.markdown(f"""
                    **üì± {row['phone_number']}**  
                    üí∞ {row['price']:,} ‡∏ø | üì° {row['provider']}  
                    üî¢ ‡∏ú‡∏•‡∏£‡∏ß‡∏°: {row['sum_numbers'] if pd.notna(row['sum_numbers']) else 'N/A'}
                    """)
                    st.markdown("---")
    
    # === ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö ===
    with st.expander("üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"):
        st.markdown("""
        **üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå:**
        - ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏≤‡∏ö
        - ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏
        
        **üìä ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç:**
        - ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        - ‡πÄ‡∏ä‡πà‡∏ô: 081-234-5678 = 44
        
        **üíé ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏°‡∏á‡∏Ñ‡∏•:**
        - ‡πÄ‡∏•‡∏Ç 8, 9 ‡∏°‡∏±‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á
        - ‡∏ú‡∏•‡∏£‡∏ß‡∏° 44, 54 ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°
        """)
    
    st.markdown("---")
    st.markdown("*üí´ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: Real-time*")

st.markdown("---")
st.caption("Nida")
