# pages/1_üì±_Phone_Prediction.py
import streamlit as st
import google.generativeai as genai
import re
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import json
from datetime import datetime
import numpy as np

# Page configuration
st.set_page_config(
    page_title="Phone Number Price Prediction with AI",
    page_icon="üì±",
    layout="wide"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .metric-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .price-highlight {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        font-size: 1.2rem;
        text-align: center;
        margin: 1rem 0;
    }
    .analysis-box {
        background: #f8f9fa;
        border-left: 4px solid #007bff;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 5px;
        line-height: 1.6;
    }
    .summary-text {
        background: #f8f9fa;
        border: 1px solid #007bff;
        border-radius: 10px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        font-size: 1.1rem;
        line-height: 1.8;
        color: #333;
    }
</style>
""", unsafe_allow_html=True)

# Page title with enhanced styling
st.markdown("# üì± Phone Number Price Prediction with AI")

# Sidebar for configuration
with st.sidebar:
    # st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    # api_key = st.text_input("Enter your Gemini API Key:", type="password")
    api_key = "AIzaSyD98blARCQvuKC2nV-wmzRq2LGfIf95W70"

    st.markdown("### üî• ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ")
    st.markdown("- ‡πÄ‡∏•‡∏Ç 8 ‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô 3 ‡∏ï‡∏±‡∏ß")
    st.markdown("- ‡πÄ‡∏•‡∏Ç 168 (‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†)")
    st.markdown("- ‡πÄ‡∏•‡∏Ç 888 (‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á)")
    st.markdown("- ‡πÄ‡∏•‡∏Ç 999 (‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà)")

if api_key:
    # Configure Gemini
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.0-flash-exp')

phone_number = st.text_input(
    "üî¢ Fill phone number for analysis", 
    placeholder="081-234-5678",
    help="Supports all networks"
)

# Example numbers with enhanced display
st.markdown("### üíé Popular Number")
col1, col2, col3, col4 = st.columns(4)

example_numbers = [
    ("081-888-8888", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏°‡∏á‡∏Ñ‡∏•", "üî•"),
    ("089-999-9999", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà", "‚≠ê"),
    ("066-168-168", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†", "üí∞"),
    ("081-234-5678", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö", "üìà")
]

for i, (num, desc, icon) in enumerate(example_numbers):
    with [col1, col2, col3, col4][i]:
        if st.button(f"{icon} {num}", key=f"example_{i}"):
            phone_number = num
            st.rerun()
        st.caption(desc)

# Enhanced analysis function with better prompt for Thai summary
def analyze_phone_number_advanced(number):
    # Clean the phone number
    cleaned = re.sub(r'[^\d]', '', number)
    
    # Get current market trends (simulated)
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    prompt = f"""
    ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå 25 ‡∏õ‡∏µ 
    
    ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {number} (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: {cleaned})
    ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {current_date}
    
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢:
    
    {{
        "phone_info": {{
            "network": "‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ (AIS/DTAC/TRUE/PENGUIN SIM/TOT/i-Mobile)",
            "region": "‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô",
            "format_type": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠/‡∏ö‡πâ‡∏≤‡∏ô/‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô)"
        }},
        "pattern_analysis": {{
            "repeated_digits": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥ ‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
            "sequential_patterns": "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏Ç‡∏∂‡πâ‡∏ô-‡∏•‡∏á ‡πÅ‡∏•‡∏∞ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
            "special_combinations": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏û‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ABAB, ABBA) ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ",
            "digit_frequency": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏•‡∏Ç 0-9"
        }},
        "cultural_significance": {{
            "lucky_numbers": "‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢",
            "unlucky_numbers": "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏á‡∏Ñ‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)",
            "chinese_numerology": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÇ‡∏´‡∏£‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏à‡∏µ‡∏ô",
            "thai_beliefs": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á",
            "feng_shui_score": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Æ‡∏ß‡∏á‡∏ã‡∏∏‡πâ‡∏¢ 0-100]
        }},
        "memorability_analysis": {{
            "ease_of_memory": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢ 1-10],
            "pronunciation_ease": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏á‡πà‡∏≤‡∏¢ 1-10],
            "visual_pattern": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î",
            "rhythm_flow": "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á"
        }},
        "market_analysis": {{
            "rarity_score": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å 1-10],
            "demand_level": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏™‡∏π‡∏á/‡∏Å‡∏•‡∏≤‡∏á/‡∏ï‡πà‡∏≥)",
            "target_buyers": "‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠",
            "seasonal_factors": "‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•/‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•"
        }},
        "price_prediction": {{
            "base_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô],
            "min_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î],
            "max_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î],
            "most_likely_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á],
            "premium_factors": ["‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤"],
            "discount_factors": ["‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏Ñ‡πà‡∏≤"],
            "market_comparison": "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á",
            "price_trend": "‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤"
        }},
        "investment_analysis": {{
            "investment_potential": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô 1-10],
            "liquidity": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢",
            "appreciation_forecast": "‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
            "risk_factors": ["‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"]
        }},
        "detailed_breakdown": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏î‡πâ‡∏≤‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤",
        "recommendations": {{
            "for_seller": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢",
            "for_buyer": "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠",
            "best_selling_time": "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢",
            "marketing_strategy": "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î"
        }},
        "confidence_level": [‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 0-100]
    }}
    
    === ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ===
    
    ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å JSON ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
    
    üîç **‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç**
    [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á]
    
    üéã **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏Æ‡∏ß‡∏á‡∏ã‡∏∏‡πâ‡∏¢**
    [‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏à‡∏µ‡∏ô ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Æ‡∏ß‡∏á‡∏ã‡∏∏‡πâ‡∏¢]
    
    üí∞ **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤**
    [‡∏ö‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥]
    
    üìà **‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô**
    [‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï]
    
    üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**
    [‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏¢]
    
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:
    - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤: 500-5,000 ‡∏ö‡∏≤‡∏ó
    - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ: 5,000-50,000 ‡∏ö‡∏≤‡∏ó  
    - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°: 50,000-500,000 ‡∏ö‡∏≤‡∏ó
    - ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°: 500,000+ ‡∏ö‡∏≤‡∏ó
    
    ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}"

# Enhanced data extraction function
def extract_comprehensive_data(analysis_text):
    try:
        # Try to find JSON in the response
        start = analysis_text.find('{')
        end = analysis_text.rfind('}') + 1
        if start != -1 and end != 0:
            json_str = analysis_text[start:end]
            data = json.loads(json_str)
            return data
    except Exception as e:
        print(f"JSON parsing error: {e}")
    
    # Enhanced fallback data
    return {
        "phone_info": {"network": "AIS", "region": "‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø"},
        "cultural_significance": {"feng_shui_score": 65},
        "memorability_analysis": {"ease_of_memory": 6},
        "market_analysis": {"rarity_score": 5, "demand_level": "‡∏Å‡∏•‡∏≤‡∏á"},
        "price_prediction": {
            "min_price": 8000,
            "max_price": 25000,
            "most_likely_price": 15000,
            "base_price": 12000
        },
        "investment_analysis": {"investment_potential": 6},
        "confidence_level": 75
    }

# Function to extract Thai summary from analysis
def extract_thai_summary(analysis_text):
    # Look for the summary section after "=== ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ==="
    summary_marker = "=== ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ==="
    if summary_marker in analysis_text:
        summary_part = analysis_text.split(summary_marker)[1].strip()
        return summary_part
    
    # If no marker found, try to extract text after JSON
    try:
        end_json = analysis_text.rfind('}')
        if end_json != -1:
            after_json = analysis_text[end_json + 1:].strip()
            if len(after_json) > 100:  # Only if there's substantial text
                return after_json
    except:
        pass
    
    # Fallback: return a portion of the text that looks like Thai analysis
    lines = analysis_text.split('\n')
    thai_lines = [line for line in lines if any(char in line for char in '‡∏Å‡∏Ç‡∏Ñ‡∏á‡∏à‡∏â‡∏ä‡∏ã‡∏ç‡∏î‡∏ï‡∏ñ‡∏ó‡∏ò‡∏ô‡∏ö‡∏õ‡∏ú‡∏ù‡∏û‡∏ü‡∏†‡∏°‡∏¢‡∏£‡∏•‡∏ß‡∏®‡∏©‡∏™‡∏´‡∏≠‡∏Æ')]
    if len(thai_lines) > 5:
        return '\n'.join(thai_lines[-20:])  # Last 20 Thai lines
    
    return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

# Main analysis section
if phone_number and api_key:
    if st.button("üöÄ Analyze and Predict the Price", type="primary", use_container_width=True):
        cleaned_number = re.sub(r'[^\d]', '', phone_number)
        if len(cleaned_number) >= 9:
            
            # Progress bar for better UX
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            with st.spinner("üîç Analyzing..."):
                status_text.text("üîÑ Number pattern processing...")
                progress_bar.progress(20)
                
                status_text.text("üéØ Culture analyzing...")
                progress_bar.progress(40)
                
                status_text.text("üí∞ Market price processing...")
                progress_bar.progress(60)
                
                analysis = analyze_phone_number_advanced(phone_number)
                progress_bar.progress(80)
                
                status_text.text("üìä Creating report...")
                progress_bar.progress(100)
                
                status_text.empty()
                progress_bar.empty()
                
                # Extract comprehensive data
                data = extract_comprehensive_data(analysis)
                
                # Extract Thai summary
                thai_summary = extract_thai_summary(analysis)
                
                # Display results with enhanced layout
                st.markdown("## üìä Results")
                
                # Key metrics in enhanced format
                col1, col2, col3, col4 = st.columns(4)
                
                feng_shui = data.get('cultural_significance', {}).get('feng_shui_score', 65)
                memory_score = data.get('memorability_analysis', {}).get('ease_of_memory', 6)
                rarity = data.get('market_analysis', {}).get('rarity_score', 5)
                investment = data.get('investment_analysis', {}).get('investment_potential', 6)
                
                with col1:
                    st.markdown(f"""
                    <div class="metric-container">
                        <h3>üîÆ {feng_shui}/100</h3>
                        <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Æ‡∏ß‡∏á‡∏ã‡∏∏‡πâ‡∏¢</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-container">
                        <h3>üß† {memory_score}/10</h3>
                        <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                with col3:
                    st.markdown(f"""
                    <div class="metric-container">
                        <h3>üíé {rarity}/10</h3>
                        <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                with col4:
                    st.markdown(f"""
                    <div class="metric-container">
                        <h3>üìà {investment}/10</h3>
                        <p>‡∏®‡∏±‡∏Å‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Price prediction section
                st.markdown("## üí∞ Price Prediction")
                
                price_data = data.get('price_prediction', {})
                min_price = price_data.get('min_price', 8000)
                max_price = price_data.get('max_price', 25000)
                likely_price = price_data.get('most_likely_price', 15000)
                base_price = price_data.get('base_price', 12000)
                
                # Highlight the most likely price
                st.markdown(f"""
                <div class="price-highlight">
                    <h2>üéØ ‡∏ø{likely_price:,}</h2>
                    <p>‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏ø{min_price:,} - ‡∏ø{max_price:,}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Enhanced price visualization
                col1, col2 = st.columns(2)
                
                with col1:
                    # Price range chart
                    fig_price = go.Figure()
                    
                    categories = ['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î']
                    prices = [min_price, base_price, likely_price, max_price]
                    colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4']
                    
                    fig_price.add_trace(go.Bar(
                        x=categories,
                        y=prices,
                        marker_color=colors,
                        text=[f'‡∏ø{price:,}' for price in prices],
                        textposition='auto',
                        textfont=dict(size=12, color='white')
                    ))
                    
                    fig_price.update_layout(
                        title="‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢",
                        xaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤",
                        yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)",
                        showlegend=False,
                        height=400
                    )
                    
                    st.plotly_chart(fig_price, use_container_width=True)
                
                with col2:
                    # Score comparison radar chart
                    categories_radar = ['‡∏Æ‡∏ß‡∏á‡∏ã‡∏∏‡πâ‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å', '‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°']
                    scores = [
                        feng_shui/10,
                        memory_score,
                        rarity,
                        investment,
                        min((feng_shui + memory_score*10)/20, 10)
                    ]
                    
                    fig_radar = go.Figure()
                    
                    fig_radar.add_trace(go.Scatterpolar(
                        r=scores,
                        theta=categories_radar,
                        fill='toself',
                        name='‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
                        marker_color='rgba(79, 172, 254, 0.6)',
                        line=dict(color='rgba(79, 172, 254, 0.8)', width=2)
                    ))
                    
                    fig_radar.update_layout(
                        polar=dict(
                            radialaxis=dict(
                                visible=True,
                                range=[0, 10],
                                tickmode='linear',
                                tick0=0,
                                dtick=2
                            )),
                        showlegend=False,
                        title="‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°",
                        height=400
                    )
                    
                    st.plotly_chart(fig_radar, use_container_width=True)
                
                # Market position analysis
                st.markdown("## üìà Market Price Analysis")
                
                # Enhanced market comparison
                market_segments = pd.DataFrame({
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå': ['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏µ', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå'],
                    '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': [2500, 12000, likely_price, 75000, 300000],
                    '‡∏™‡∏µ': ['#95a5a6', '#f39c12', '#e74c3c', '#9b59b6', '#2c3e50']
                })
                
                fig_market = px.bar(
                    market_segments,
                    x='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå',
                    y='‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                    color='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå',
                    title="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î"
                )
                
                fig_market.update_layout(
                    showlegend=False,
                    height=400,
                    yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)",
                    xaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                )
                
                st.plotly_chart(fig_market, use_container_width=True)
                
                # Investment timeline
                st.markdown("## üìä ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô")
                
                # Create investment projection
                months = ['‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', '3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '1 ‡∏õ‡∏µ', '2 ‡∏õ‡∏µ']
                projections = [
                    likely_price,
                    likely_price * 1.05,
                    likely_price * 1.12,
                    likely_price * 1.25,
                    likely_price * 1.45
                ]
                
                fig_timeline = go.Figure()
                fig_timeline.add_trace(go.Scatter(
                    x=months,
                    y=projections,
                    mode='lines+markers',
                    name='‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤',
                    line=dict(color='#17a2b8', width=3),
                    marker=dict(size=8, color='#17a2b8')
                ))
                
                fig_timeline.update_layout(
                    title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï",
                    xaxis_title="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
                    yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå (‡∏ö‡∏≤‡∏ó)",
                    height=400
                )
                
                st.plotly_chart(fig_timeline, use_container_width=True)
                
                # Thai Summary Section (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà JSON)
                st.markdown("## üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
                
                st.markdown(f"""
                <div class="summary-text">
                {thai_summary}
                </div>
                """, unsafe_allow_html=True)
                
        else:
            st.error("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 9 ‡∏´‡∏•‡∏±‡∏Å)")

elif phone_number and not api_key:
    st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å API key ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á")

# Footer with version info
st.markdown("---")
st.markdown("Nida")
