# pages/1_üì±_Phone_Prediction.py
import streamlit as st
import google.generativeai as genai
import re
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import json

# Page configuration
st.set_page_config(
    page_title="Phone Number Price Prediction with AI",
    page_icon="üì±",
    layout="centered"
)

# Page title
st.title("üì± Phone Number Price Prediction with AI")

st.write("Enter a phone number and get AI-powered analysis and price prediction in Thai Baht!")

# Sidebar for API key
# st.sidebar.header("Configuration")
# api_key = st.sidebar.text_input("Enter your Gemini API Key:", type="password")
api_key = "AIzaSyD98blARCQvuKC2nV-wmzRq2LGfIf95W70"

if api_key:
    # Configure Gemini
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-2.0-flash')

# Get user input
phone_number = st.text_input("What's your phone number?", placeholder="e.g., 081-234-5678")

# Add example buttons
st.write("**‡∏•‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:**")
col1, col2, col3 = st.columns(3)
with col1:
    if st.button("081-888-8888"):
        phone_number = "081-888-8888"
        st.rerun()
with col2:
    if st.button("089-999-9999"):
        phone_number = "089-999-9999"
        st.rerun()
with col3:
    if st.button("066-123-4567"):
        phone_number = "066-123-4567"
        st.rerun()

# Enhanced function to analyze Thai phone number and return structured response
def analyze_phone_number(number):
    # Clean the phone number
    cleaned = re.sub(r'[^\d]', '', number)
    
    prompt = f"""
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏ó‡∏¢: {number}
    
    ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏ó‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
    {{
        "pattern_analysis": {{
            "repeated_digits": "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö",
            "sequential": "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö", 
            "lucky_numbers": "‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ"
        }},
        "cultural_meaning": {{
            "luck_score": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏á‡∏Ñ‡∏• 0-100],
            "meaning": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡πÑ‡∏ó‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ"
        }},
        "memorability_score": [‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢ 1-10],
        "price_analysis": {{
            "min_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå],
            "max_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå],
            "average_price": [‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå],
            "reasoning": "‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏á‡∏Ñ‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á"
        }},
        "overall_analysis": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå"
    }}
    
    ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏ó‡∏¢ ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏à‡∏≤‡∏Å:
    - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡πÄ‡∏•‡∏Ç‡∏á‡πà‡∏≤‡∏¢)
    - ‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢ (8=‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á, 9=‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà, 6=‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢)
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    
    ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: {str(e)}"

# Function to extract data for visualization
def extract_price_data(analysis_text):
    try:
        # Try to find JSON in the response
        start = analysis_text.find('{')
        end = analysis_text.rfind('}') + 1
        if start != -1 and end != 0:
            json_str = analysis_text[start:end]
            data = json.loads(json_str)
            return data
    except:
        pass
    
    # Fallback data if JSON parsing fails
    return {
        "cultural_meaning": {"luck_score": 50},
        "memorability_score": 5,
        "price_analysis": {
            "min_price": 5000,
            "max_price": 15000,
            "average_price": 10000
        }
    }

# Analyze button
if phone_number and api_key:
    if st.button("üîç Analyze & Predict Price"):
        if len(re.sub(r'[^\d]', '', phone_number)) >= 9:  # Basic validation
            with st.spinner("Analyzing phone number..."):
                analysis = analyze_phone_number(phone_number)
                
                st.subheader("üìä Analysis Results")
                
                # Extract structured data for visualization
                data = extract_price_data(analysis)
                
                # Display key metrics
                col1, col2, col3 = st.columns(3)
                
                luck_score = data.get('cultural_meaning', {}).get('luck_score', 50)
                memory_score = data.get('memorability_score', 5)
                avg_price = data.get('price_analysis', {}).get('average_price', 10000)
                
                with col1:
                    st.metric("üçÄ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏á‡∏Ñ‡∏•", f"{luck_score}/100")
                with col2:
                    st.metric("üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢", f"{memory_score}/10")
                with col3:
                    st.metric("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"‡∏ø{avg_price:,}")
                
                # Price range visualization
                st.subheader("üíé ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                
                price_data = data.get('price_analysis', {})
                min_price = price_data.get('min_price', 5000)
                max_price = price_data.get('max_price', 15000)
                
                # Create price range chart
                fig = go.Figure()
                
                categories = ['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î', '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î']
                prices = [min_price, avg_price, max_price]
                colors = ['#ff6b6b', '#4ecdc4', '#45b7d1']
                
                fig.add_trace(go.Bar(
                    x=categories,
                    y=prices,
                    marker_color=colors,
                    text=[f'‡∏ø{price:,}' for price in prices],
                    textposition='auto',
                    textfont=dict(size=14, color='white')
                ))
                
                fig.update_layout(
                    title="‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå",
                    xaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤",
                    yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)",
                    showlegend=False,
                    height=400,
                    title_font_size=16
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # Score visualization
                st.subheader("üìà ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô")
                
                # Create radar chart for scores
                categories_radar = ['‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏°‡∏á‡∏Ñ‡∏•', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏á‡πà‡∏≤‡∏¢', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å']
                scores = [
                    luck_score/10,  # Scale to 0-10
                    memory_score,
                    min(luck_score/10 + 2, 10),  # Popularity score
                    max(10 - memory_score, 1)     # Rarity score
                ]
                
                fig_radar = go.Figure()
                
                fig_radar.add_trace(go.Scatterpolar(
                    r=scores,
                    theta=categories_radar,
                    fill='toself',
                    name='‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô',
                    marker_color='rgba(79, 172, 254, 0.6)'
                ))
                
                fig_radar.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 10]
                        )),
                    showlegend=False,
                    title="‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
                    height=400
                )
                
                st.plotly_chart(fig_radar, use_container_width=True)
                
                # Market comparison
                st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î")
                
                # Sample market data for comparison
                market_data = pd.DataFrame({
                    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå': ['‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡πà‡∏¢‡∏°'],
                    '‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢': [2000, 15000, avg_price, 80000],
                    '‡∏™‡∏µ': ['#95a5a6', '#f39c12', '#e74c3c', '#9b59b6']
                })
                
                fig_comparison = px.bar(
                    market_data, 
                    x='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå', 
                    y='‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢',
                    color='‡∏™‡∏µ',
                    color_discrete_map={color: color for color in market_data['‡∏™‡∏µ']},
                    title="‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏±‡∏ö‡∏ï‡∏•‡∏≤‡∏î"
                )
                
                fig_comparison.update_layout(
                    showlegend=False,
                    height=400,
                    yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)",
                    xaxis_title="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
                )
                
                st.plotly_chart(fig_comparison, use_container_width=True)
                
                # Full analysis text
                st.subheader("üìù ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")
                st.write(analysis)
                
                # Add some visual elements
                st.success("‚úÖ Analysis completed!")
                
        else:
            st.error("Please enter a valid phone number with at least 9 digits.")

elif phone_number and not api_key:
    st.warning("Please enter your Gemini API key in the sidebar to get analysis.")

# Popular patterns section
st.markdown("---")
st.subheader("üî• ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤")

# Create sample data for popular numbers
popular_data = pd.DataFrame({
    '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': ['081-888-8888', '089-999-9999', '081-111-1111', '066-168-168', '089-123-456'],
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì': [150000, 120000, 50000, 35000, 15000],
    '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó': ['‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•', '‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•', '‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥', '‡πÄ‡∏•‡∏Ç‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†', '‡πÄ‡∏•‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏á']
})

fig_popular = px.bar(
    popular_data, 
    x='‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå', 
    y='‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì',
    color='‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
    title="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤"
)

fig_popular.update_layout(
    height=400,
    xaxis_title="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    yaxis_title="‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó)"
)

st.plotly_chart(fig_popular, use_container_width=True)

# Information section
st.markdown("---")
st.subheader("‚ÑπÔ∏è How it works")
st.write("""
- Enter a Thai phone number
- AI analyzes digit patterns, lucky numbers, and memorability
- Get price prediction based on Thai market preferences
- Considers cultural factors like lucky number 8 and 9
- View interactive charts and comparisons
""")

# Market insights
st.subheader("üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå")

insights_col1, insights_col2 = st.columns(2)

with insights_col1:
    st.info("""
    **‡πÄ‡∏•‡∏Ç‡∏°‡∏á‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏¢‡∏°:**
    - ‡πÄ‡∏•‡∏Ç 8: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á
    - ‡πÄ‡∏•‡∏Ç 9: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà  
    - ‡πÄ‡∏•‡∏Ç 6: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
    - ‡πÄ‡∏•‡∏Ç 168: ‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†
    """)

with insights_col2:
    st.info("""
    **‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤:**
    - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥/‡πÄ‡∏£‡∏µ‡∏¢‡∏á
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏¢‡∏≤‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    """)

# Footer
st.markdown("---")
st.caption("Nida")
